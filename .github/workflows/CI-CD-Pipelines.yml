name: CI/CD Pipeline (Front)

on:
  push:
    branches:
      - develop
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: "Choose deployment environment"
        required: true
        type: choice
        options:
          - development
          - production

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install Dependencies
        run: npm install

      - name: Build Application
        run: npm run build

  build-and-push-docker:
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and Push Docker Images
        uses: docker/build-push-action@v6
        with:
          context: ./ # Adjust if your Dockerfile is in a subdirectory
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/pawsome-node:frontend
            ${{ secrets.DOCKERHUB_USERNAME }}/pawsome:${{ github.sha }}

  deploy-to-netlify:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: ${{ github.event.inputs.environment == 'development' }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install Netlify CLI
        run: npm install -g netlify-cli

      - name: Deploy to Netlify
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
        run: |
          netlify deploy --dir=./dist

  deploy-to-ec2:
    runs-on: ubuntu-latest
    needs: build-and-push-docker
    if: ${{ github.ref_name == 'main' || github.event.inputs.environment == 'production' }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up SSH Key for EC2
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}

      - name: Deploy to EC2 Instance
        run: |
          scp -o StrictHostKeyChecking=no -r ./dist/* ec2-user@${{ secrets.EC2_PUBLIC_IP }}:/i004-pawsome-front

          ssh -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_PUBLIC_IP }} << 'EOF'
            cd /i004-pawsome-front
            npm install --production
            pm2 reload ecosystem.config.js || pm2 start ecosystem.config.js --name i004-pawsome-front
          EOF
